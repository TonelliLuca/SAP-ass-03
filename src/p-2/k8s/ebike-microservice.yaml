apiVersion: apps/v1
kind: Deployment
metadata:
  name: ebike-microservice
  namespace: sap-assignment

spec:
  replicas: 1
  selector: { matchLabels: { app: ebike-microservice } }
  template:
    metadata:
      labels: { app: ebike-microservice }
    spec:
      initContainers:
        - name: wait-for-eureka
          image: curlimages/curl:latest
          command: [ 'sh', '-c', 'until curl -s http://eureka-service:8761/actuator/health | grep -q "UP"; do echo waiting for eureka; sleep 2; done;' ]
        - name: wait-for-mongodb
          image: curlimages/curl:latest
          command: [ 'sh', '-c', 'until curl -s http://mongodb-service:27017 > /dev/null; do echo waiting for mongodb; sleep 2; done;' ]
        - name: wait-for-kafka
          image: curlimages/curl:latest
          command: [ 'sh', '-c', 'until nc -z kafka-broker-1 29092; do echo waiting for kafka; sleep 2; done;' ]
        - name: wait-for-ride
          image: curlimages/curl:latest
          command: [ 'sh', '-c', 'until curl -s http://ride-microservice:8080/health | grep -q "OK"; do echo waiting for ride-microservice; sleep 2; done;' ]

      containers:
        - name: ebike-microservice
          image: ebike-microservice:latest
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 8080 }]
          envFrom:
            - configMapRef: { name: app-config }
          env:
            - name: MONGO_DATABASE
              value: "ebikes_db"
          readinessProbe:
            httpGet: { path: /health, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /health, port: 8080 }
            initialDelaySeconds: 30
            periodSeconds: 15

---
apiVersion: v1
kind: Service
metadata:
  name: ebike-microservice
  namespace: sap-assignment

spec:
  selector: { app: ebike-microservice }
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP
